use strict;
use warnings;
use v5.10;
use utf8;

package Text::CSV::Euclid;
# ABSTRACT: Provide a csv parser with options specified on the command-line

use Carp;
use Text::CSV;
use String::Escape qw(unprintable);
use Getopt::Euclid;
use Data::Alias;
use Symbol qw( gensym );

our $canary;

BEGIN {
    use Data::Dump qw(dump);
    # Set up canary value in %ARGV that will be clobbered during the
    # actual parsing step
    $canary = gensym;
    $ARGV{$canary}++;
    #warn "%ARGV: " . dump(\%ARGV) . "\n";
}


sub _get_csv_attrs_from_hash {
    # Same defaults as Text::CSV
    state $defaults = {
        quote_char          => '"',
        escape_char         => '"',
        sep_char            => ',',
        eol                 => $\,
        always_quote        => 0,
        binary              => 0,
        keep_meta_info      => 0,
        allow_loose_quotes  => 0,
        allow_loose_escapes => 0,
        allow_whitespace    => 0,
        blank_is_undef      => 0,
        verbatim            => 0,
    };

    my %hash;

    # Use %ARGV by default, but accept either hash or hashref
    alias {
        if (@_ == 0) {
            # Default: use %ARGV
            %hash = %ARGV
                or croak "Error: unable to use %ARGV before options have been parsed.";
        }
        elsif (@_ == 1  and  ref $_[0] eq 'HASH') {
            # Only one arg, and it's hashref, so use hashref
            %hash = %{$_[0]};
        }
        else {
            # Multiple args or first arg not a hashref, so assume @_
            # is a hash
            %hash = @_;
        }
    };

    my %ret = map {
        my $key = $_;
        (my $argv_key = "--$key") =~ s{_}{-}g; # Convert e.g. 'quote_char' into '--quotemeta-char'

        $_ => unprintable($hash{$argv_key} // $defaults->{$key});
    } keys %$defaults;

    return \%ret;
}

my $csv;

=function csv

This function returns the CSV object created according to the
command-line arguments that were passed to the script. Note that this
object is only created at the time of its first access, and not
before. This means that your script may change elements of C<%ARGV> as
it wishes before calling C<csv>, and the returned CSV object will use
the modified options. In particular, you can change the defaults in
your script without using a BEGIN block.

=cut

sub csv {
    if (not $csv) {
        # If the canary still exsits in %ARGV, then parsing has not yet occurred
        if (exists $ARGV{$canary}) {
            croak "Error: unable to create csv parser object before options have been parsed.";
        }

        $csv = Text::CSV->new(_get_csv_attrs_from_hash(\%ARGV));
    }

    return $csv;
}

1; # Magic true value required at end of module
__END__

=head1 SYNOPSIS

In your script:

    use Text::CSV::Euclid;
    my $csv = Text::CSV::Euclid->csv;

    # Now do interesting stuff that involves parsing CSV.
    parse_CSV_files_using($csv);

Now, to run your script:

    $ perl your-script.pl --sep-char='|' --quote-char="'" --escape-char"'"

Your script will read CSV files with vertical bars as separators and
single quotes as quotation characters, instead of the defaults (which
are commas and double quotes).

    $ perl your-script.pl --sep-char='\t' --quote-char="=" --escape-char"="

Your script will read CSV files with tabs characters as separators and
equals signs as quotation characters.

All the options to Text::CSV->new should be supported. These are
listed in the OPTIONS section.

=head1 OPTIONS

=head2 Options Affecting the Processing of CSV Data

The following command-line arguments all correspond to the arguments
to Text::CSV->new:

=over

=item --quote-char [=] <char>

=for Euclid:
    char.type: string, length(char) == 1

=item --escape-char [=] <char>

=for Euclid:
    char.type: string, length(char) == 1

=item --sep-char [=] <char>

=item --eol [=] <eol>

=item --always-quote

=item --binary

=item --keep-meta-info

=item --allow-loose-quotes

=item --allow-loose-escapes

=item --allow-whitespace

=item --blank-is-undef

=item --verbatim

=back


=head1 DESCRIPTION

This module is intended to be used from a script that deals with
tabular data in files. Using this module will allow the user of your
script to specify all possible options to Text::CSV's constructor by
passing command-line arguments to your script.

=head1 DIAGNOSTICS

=over

=item C<< Error: unable to create csv parser object before options have been parsed. >>

You tried to use the csv method of this module before the program's
command-line options were parsed. Since the options were not parsed,
the module could not know what options to use to construct a CSV
object for you. This error is probably only possible if you suppress
the import method of this module by using it with an empty import
list.

=item Other errors

See Getopt::Euclid and Text::CSV for errors that could possibly be
generated by command-lline parsing or CSV object usage, respectively.

=back


=head1 DEPENDENCIES

=over

=item Text::CSV

Provides the CSV object

=item Getopt::Euclid

Used for command-line parsing

=back

=head1 INCOMPATIBILITIES

This module uses Getopt::Euclid, so it may not interact well with
other modules from the Getopt:: family.

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to
C<rct+perlbug@thompsonclan.org>.

=head1 SEE ALSO

=over 4

=item Getopt::Euclid
=item Text::CSV

=back
